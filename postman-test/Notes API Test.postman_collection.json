{
	"info": {
		"_postman_id": "2230a5df-1194-4f1e-9a85-e1aa40409f77",
		"name": "Notes API Test",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "28050071"
	},
	"item": [
		{
			"name": "Users",
			"item": [
				{
					"name": "Adding Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response status code code should have 201 value', () => {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test('response Content-Type header should have application/json value', () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');",
									"});",
									"",
									"pm.test('response body should an object', () => {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.be.an('object');",
									"});",
									"",
									"pm.test('response body should have correct property and value', () => {",
									"    const responseJson = pm.response.json();",
									"",
									"    pm.expect(responseJson).to.ownProperty('status');",
									"    pm.expect(responseJson.status).to.equals('success');",
									"    pm.expect(responseJson).to.ownProperty('message');",
									"    pm.expect(responseJson.message).to.equals('User berhasil ditambahkan');",
									"    pm.expect(responseJson).to.ownProperty('data');",
									"    pm.expect(responseJson).to.be.an('object');",
									"})",
									"",
									"pm.test('response body data should have userId property and not equal to empty', () => {",
									"    const responseJson = pm.response.json();",
									"    const {data} = responseJson;",
									"",
									"    pm.expect(data).to.ownProperty('userId');",
									"    pm.expect(data).to.not.equals('');",
									"",
									"    pm.environment.set('currentUserId', data.userId);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"{{$timestamp}}-{{newUsername}}\",\n    \"password\": \"{{newPassword}}\",\n    \"fullname\": \"{{newFullname}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "http://localhost:5000/users"
					},
					"response": []
				},
				{
					"name": "Adding User with  Exist Username",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"/* referensi: https://learning.postman.com/docs/writing-scripts/script-references/postman-sandbox-api-reference/#sending-requests-from-scripts */",
									"",
									"const postRequest = {",
									"    url: 'http://localhost:5000/users',",
									"    method: 'POST',",
									"    header: {",
									"        'Content-Type':'application/json',",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify({",
									"            username: 'testing',",
									"            password: pm.environment.get('newPassword'),",
									"            fullname: pm.environment.get('newFullname')",
									"        }),",
									"    },",
									"};",
									"",
									"pm.sendRequest(postRequest, (error, response) => {",
									"    console.log(error ? error : response.JSON);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response status code should have code 400 value', () => {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test('response Content-Type header should have application/json value', () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');",
									"});",
									"",
									"pm.test('response body should an object', () => {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.be.an('object');",
									"});",
									"",
									"pm.test('response body should have correct property and value', () => {",
									"    const responseJson = pm.response.json();",
									"",
									"    pm.expect(responseJson).to.ownProperty('status');",
									"    pm.expect(responseJson.status).to.equals('fail');",
									"    pm.expect(responseJson).to.ownProperty('message');",
									"    pm.expect(responseJson.message).to.equals('Gagal menambahkan user. Username sudah digunakan.');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"testing\",\n    \"password\": \"{{newPassword}}\",\n    \"fullname\": \"{{newFullname}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "http://localhost:5000/users"
					},
					"response": []
				},
				{
					"name": "Adding with Bad User Payload",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let badUserPayloads = pm.environment.get('badUserPayloads');",
									"",
									"if(!badUserPayloads || badUserPayloads.length == 0){",
									"    badUserPayloads = [",
									"        { password: 'secret', fullname: 'John Doe'},",
									"        { username: 1, password: 'secret', fullname: 'John Doe'},",
									"        { username: 'johndoe', fullname: 'John Doe' },",
									"        { username: 'johndoe', password: true, fullname: 'John Doe' },",
									"        { username: 'johndoe', password: 'secret'},",
									"        { username: 'johndoe', password: 'secret', fullname: 0 },",
									"    ]",
									"}",
									"",
									"const currentBadUserPayload = badUserPayloads.shift();",
									"pm.environment.set('currentBadUserPayload', JSON.stringify(currentBadUserPayload));",
									"pm.environment.set('badUserPayloads', badUserPayloads)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response status code should have 400 value', () => {",
									"    pm.response.to.have.statusCode(400);",
									"});",
									"",
									"pm.test('response Content-Type header should have application/json value', () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');",
									"});",
									"",
									"pm.test('response body should an Object', () => {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.be.an('object');",
									"});",
									"",
									"pm.test('response body should have correct property and value', () => {",
									"    const responseJson = pm.response.json();",
									"",
									"    pm.expect(responseJson).to.ownProperty('status');",
									"    pm.expect(responseJson.status).to.equals('fail');",
									"    pm.expect(responseJson).to.ownProperty('message');",
									"    pm.expect(responseJson.message).to.not.equals(' ');",
									"    pm.expect(responseJson.message).to.not.equals(null);",
									"});",
									"",
									"const repeatrequestUntilDatasetEmpty = () => {",
									"    const badUserPayloads = pm.environment.get('badUserPayloads');",
									"",
									"    if(badUserPayloads && badUserPayloads.length == 0){",
									"        postman.setNextRequest('Adding User with Bad User Payload');",
									"    }",
									"}",
									"",
									"repeatrequestUntilDatasetEmpty();"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{currentBadUserPayload}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "http://localhost:5000/users"
					},
					"response": []
				},
				{
					"name": "Getting User By Correct Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response status code should have 200 value', () => {",
									"    pm.response.to.status(200);",
									"});",
									"",
									"pm.test('response Content-Type header should have application/json value', () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');",
									"});",
									"",
									"pm.test('response body should an object', () => {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.be.an('object');",
									"})",
									"",
									"pm.test('response body should have correct property and value', () => {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.ownProperty('status');",
									"    pm.expect(responseJson.status).to.equals('success');",
									"    pm.expect(responseJson).to.ownProperty('data');",
									"    pm.expect(responseJson.data).to.be.an('object')",
									"});",
									"",
									"pm.test('response body data should contain user object', () => {",
									"    const {data} = pm.response.json();",
									"    pm.expect(data).to.have.ownProperty('user');",
									"    pm.expect(data.user).to.be.an('object');",
									"});",
									"",
									"pm.expect('user object should contain only id, username, and fullname with correct value', () => {",
									"    const {data: {user}} = pm.response.json();",
									"",
									"    pm.expect(user).to.have.ownProperty('id');",
									"    pm.expect(user.id).to.equals(pm.environment.get('currentUserId'));",
									"    pm.expect(user).to.have.ownProperty('username');",
									"    pm.expect(user.username).to.equals(pm.environment.get('newUsername'));",
									"    pm.expect(user).to.have.ownProperty('fullname');",
									"    pm.expect(user.fullname).to.equals(pm.environment.get('newFullname'));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "http://localhost:5000/users/{{currentUserId}}"
					},
					"response": []
				},
				{
					"name": "Getting User By Incorrect Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response status code should have 404 value', () => {",
									"    pm.response.to.have.status(404);",
									"});",
									" ",
									"pm.test('response Content-Type header should have application/json value', () => {",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');",
									"}); ",
									" ",
									"pm.test('response body should an object', () => {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.be.an('object');",
									"});",
									" ",
									"pm.test('response body should have correct property and value', () => {",
									"    const responseJson = pm.response.json();",
									" ",
									"    pm.expect(responseJson).to.have.ownProperty('status');",
									"    pm.expect(responseJson.status).to.equals('fail');",
									"    pm.expect(responseJson).to.have.ownProperty('message');",
									"    pm.expect(responseJson.message).to.equals('User tidak ditemukan');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "http://localhost:5000/users/yyyy"
					},
					"response": []
				}
			]
		},
		{
			"name": "Authentications",
			"item": [
				{
					"name": "Post Authentication With Valid Credential",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const postRequest = {",
									"    url: \"http://localhost:5000/users\",",
									"    method: \"post\",",
									"    header: {",
									"        'Content-Type': 'application/json'",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify({",
									"            username: 'testing',",
									"            password: pm.environment.get('newPassword'),",
									"            fullname: pm.environment.get('newFullname')",
									"        }) ",
									"    }",
									"}",
									"",
									"pm.sendRequest(postRequest, (error, response) => {",
									"    console.log(error ? error : response.json())",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response status code should have 201 value', () => {",
									"    pm.response.to.have.status(201)",
									"})",
									"",
									"pm.test('response Content-Type header should have appllication/json value', () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8')",
									"})",
									"",
									"pm.test('response body should an object', () => {",
									"    const responseJson = pm.response.json()",
									"    pm.expect(responseJson).to.be.an('object')",
									"})",
									"",
									"pm.test('response body should have correct property and value', () => {",
									"    const responseJson = pm.response.json()",
									"",
									"    pm.expect(responseJson).to.ownProperty('status');",
									"    pm.expect(responseJson.status).to.equals('success');",
									"    pm.expect(responseJson).to.ownProperty('message');",
									"    pm.expect(responseJson.message).to.equals('Authentication berhasil ditambahkan');",
									"    pm.expect(responseJson).to.ownProperty('data');",
									"    pm.expect(responseJson.data).to.be.an('object');    ",
									"})",
									"",
									"pm.test('response body data should have property accessToken and refreshToken with correct value', () => {",
									"    const responseJson = pm.response.json()",
									"    const {data} = responseJson;",
									"",
									"    pm.expect(data).to.have.ownProperty('accessToken')",
									"    pm.expect(data.accessToken).to.not.equals('')",
									"    pm.expect(data.accessToken).to.not.equals(null)",
									"    pm.expect(data).to.have.ownProperty('refreshToken')",
									"    pm.expect(data.refreshToken).to.not.equals('')",
									"    pm.expect(data.refreshToken).to.not.equals(null)",
									"",
									"    // Menyimpan accessToken dan refreshToken di environtment variable",
									"    pm.environment.set('accessToken', data.accessToken)",
									"    pm.environment.set('refreshToken', data.refreshToken)",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"testing\",\n    \"password\": \"{{newPassword}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "http://localhost:5000/authentications"
					},
					"response": []
				},
				{
					"name": "Post Authentication With Invalid Credential",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response status code should have 401 value', () => {",
									"    pm.response.to.have.status(401)",
									"})",
									"",
									"pm.test('response Content-Type header should have application/json value', () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8')",
									"})",
									"",
									"pm.test('response body should an object', () => {",
									"    const responseJson = pm.response.json()",
									"",
									"    pm.expect(responseJson).to.be.an('object')",
									"})",
									"",
									"pm.test('response body should have correct property and value', () => {",
									"    const responseJson = pm.response.json()",
									"",
									"    pm.expect(responseJson).to.ownProperty('status');",
									"    pm.expect(responseJson.status).to.equals('fail');",
									"    pm.expect(responseJson).to.ownProperty('message');",
									"    pm.expect(responseJson.message).to.equals('Kredensial yang anda berikan salah')",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"testing\",\n    \"password\": \"somebadpassword\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "http://localhost:5000/authentications"
					},
					"response": []
				},
				{
					"name": "Put Authentications With Valid Refresh Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response status code should have 200 value', () => {",
									"    pm.response.to.have.status(200)",
									"})",
									"",
									"pm.test('response Content-Type header should have application/json value', () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8')",
									"})",
									"",
									"pm.test('response body should an object', () => {",
									"    const responseJson = pm.response.json()",
									"",
									"    pm.expect(responseJson).to.be.an('object')",
									"})",
									"",
									"pm.test('response body should have correct property and value', () => {",
									"    const responseJson = pm.response.json()",
									"",
									"    pm.expect(responseJson).to.ownProperty('status')",
									"    pm.expect(responseJson.status).to.equals('success')",
									"    pm.expect(responseJson).to.ownProperty('message')",
									"    pm.expect(responseJson.message).to.equals('Access Token berhasil diperbarui')",
									"    pm.expect(responseJson).to.ownProperty('data')",
									"    pm.expect(responseJson.data).to.be.an('object')",
									"})",
									"",
									"pm.test('response body data should have property accessToken with correct value', () => {",
									"    const responseJson = pm.response.json()",
									"    const {data} = responseJson",
									"",
									"    pm.expect(data).to.ownProperty('accessToken')",
									"    pm.expect(data.accessToken).to.not.equals('')",
									"    pm.expect(data.accessToken).to.not.equals(null)",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"refreshToken\": \"{{refreshToken}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "http://localhost:5000/authentications"
					},
					"response": []
				},
				{
					"name": "Put Authentications With Invalid Refresh Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response status code should have 400 value', () => {",
									"    pm.response.to.have.status(400)",
									"})",
									"",
									"pm.test('response Content-Type header should have application/json value', () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8')",
									"})",
									"",
									"pm.test('response body should an object', () => {",
									"    const responseJson = pm.response.json()",
									"",
									"    pm.expect(responseJson).to.be.an('object')",
									"})",
									"",
									"pm.test('response body shuld have correct property and value', () => {",
									"    const responseJson = pm.response.json()",
									"",
									"    pm.expect(responseJson).to.ownProperty('status')",
									"    pm.expect(responseJson.status).to.equals('fail')",
									"    pm.expect(responseJson).to.ownProperty('message')",
									"    pm.expect(responseJson.message).to.equals('Refresh token tidak valid')",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"refreshToken\": \"yyyyy\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "http://localhost:5000/authentications"
					},
					"response": []
				},
				{
					"name": "Delete Authentications With Valid Refresh Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response status code shoudl have 200 value', () => {",
									"    pm.response.to.have.status(200)",
									"})",
									"",
									"pm.test('response Content-Type header should have application/json value', () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8')",
									"})",
									"",
									"pm.test('response body should an object', () => {",
									"    const responseJson = pm.response.json()",
									"    pm.expect(responseJson).to.be.an('object')",
									"})",
									"",
									"pm.test('response body should have correct property and value', () => {",
									"    const responseJson = pm.response.json()",
									"",
									"    pm.expect(responseJson).to.ownProperty('status')",
									"    pm.expect(responseJson.status).to.equals('success')",
									"    pm.expect(responseJson).to.ownProperty('message')",
									"    pm.expect(responseJson.message).to.equals('Refresh token berhasil dihapus')",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"refreshToken\": \"{{refreshToken}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "http://localhost:5000/authentications"
					},
					"response": []
				},
				{
					"name": "Delete Authentications With Invalid Refresh Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response status code should have 400 value', () => {",
									"    pm.response.to.have.status(400)",
									"})",
									"",
									"pm.test('response Content-Type header should have application/json value', () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8')",
									"})",
									"",
									"pm.test('response body should an object', () => {",
									"    const responseJson = pm.response.json()",
									"",
									"    pm.expect(responseJson).to.be.an('object')",
									"})",
									"",
									"pm.test('response body should have correct property and value', () => {",
									"    const responseJson = pm.response.json()",
									"",
									"    pm.expect(responseJson).to.ownProperty('status')",
									"    pm.expect(responseJson.status).to.equals('fail')",
									"    pm.expect(responseJson).to.ownProperty('message')",
									"    pm.expect(responseJson.message).to.equals('Refresh token tidak valid')",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"refreshToken\": \"yyyyy\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "http://localhost:5000/authentications"
					},
					"response": []
				}
			]
		},
		{
			"name": "Notes",
			"item": [
				{
					"name": "Adding Notes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response status code should have 200 value', () => {\r",
									"   pm.response.to.have.status(201);\r",
									"}); \r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.ownProperty('status');\r",
									"    pm.expect(responseJson.status).to.equals('success');\r",
									"    pm.expect(responseJson).to.ownProperty('message');\r",
									"    pm.expect(responseJson.message).to.equals('Catatan berhasil ditambahkan');\r",
									"    pm.expect(responseJson).to.ownProperty('data');\r",
									"    pm.expect(responseJson.data).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body data should have noteId property and not equal to empty', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    const { data } = responseJson;\r",
									" \r",
									"    pm.expect(data).to.ownProperty('noteId');\r",
									"    pm.expect(data.noteId).to.not.equals('');\r",
									" \r",
									"    pm.environment.set('noteId', data.noteId);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{accessToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"title\": \"Catatan A\",\r\n   \"tags\": [\"Android\", \"Web\"],\r\n   \"body\": \"Isi dari catatan A\"\r\n} ",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "localhost:5000/notes"
					},
					"response": []
				},
				{
					"name": "Adding Notes With Bad Note Payload",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let badNotePayloads = pm.environment.get('badNotePayloads');",
									"",
									"if(!badNotePayloads || badNotePayloads.length == 0){",
									"    badNotePayloads = [",
									"        { title: 'dicoding', body: 'teks'},",
									"        { title: 1, body: 'secret', tags: 'John Doe'},",
									"        { title: 'johndoe', body: 'John Doe' },",
									"        { title: 'johndoe', body: true, tags: 'John Doe' },",
									"        { title: 'johndoe', body: 'secret'},",
									"        { title: 'johndoe', body: 'secret', tags: 0 },",
									"    ]",
									"}",
									"",
									"const currentBadNotePayload = badNotePayloads.shift();",
									"pm.environment.set('currentBadNotePayload', JSON.stringify(currentBadNotePayload));",
									"pm.environment.set('badNotePayloads', badNotePayloads)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response status code should have 400 value', () => {",
									"    pm.response.to.have.status(400)",
									"})",
									"",
									"pm.test('response Content-Type header should have application/json value', () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8')",
									"})",
									"",
									"pm.test('response body should an object', () => {",
									"    const responseJson = pm.response.json()",
									"",
									"    pm.expect(responseJson).to.be.an('object')",
									"})",
									"",
									"pm.test('response body should have correct property and value', () => {",
									"    const responseJson = pm.response.json()",
									"",
									"    pm.expect(responseJson).to.ownProperty('status')",
									"    pm.expect(responseJson.status).to.equals('fail')",
									"    pm.expect(responseJson).to.ownProperty('message')",
									"    pm.expect(responseJson.message).to.not.equals('')",
									"    pm.expect(responseJson.message).to.not.equals(null)",
									"})",
									"",
									"const repeatrequestUntilDatasetEmpty = () => {",
									"    const badNotePayloads = pm.environment.get('badNotePayloads')",
									"",
									"    if(badNotePayloads && badNotePayloads.length == 0){",
									"        postman.setNextRequest('Adding Notes With Bad Note Payloads')",
									"    }",
									"}",
									"",
									"repeatrequestUntilDatasetEmpty();"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{accessToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{currentBadNotePayloads}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "http://localhost:5000/notes"
					},
					"response": []
				},
				{
					"name": "Getting All Notes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response status code should have 200 value', () => {\r",
									"   pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"   pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
									"});\r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"   const responseJson = pm.response.json();\r",
									"   pm.expect(responseJson).to.be.an('object');\r",
									"}); \r",
									"\r",
									"pm.test('response body should have the correct property and value', () => {\r",
									"  const responseJson = pm.response.json();\r",
									"   pm.expect(responseJson).to.have.ownProperty('status');\r",
									"   pm.expect(responseJson.status).to.equals('success');\r",
									"   pm.expect(responseJson).to.have.ownProperty('data');\r",
									"   pm.expect(responseJson.data).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body data should have a notes array and contain at least 1 item', () => {\r",
									"   const responseJson = pm.response.json();\r",
									"   const { data } = responseJson;\r",
									" \r",
									"   pm.expect(data).to.have.ownProperty('notes');\r",
									"   pm.expect(data.notes).to.be.an('array');\r",
									"   pm.expect(data.notes).lengthOf.at.least(1);\r",
									"}); "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{accessToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "localhost:5000/notes"
					},
					"response": []
				},
				{
					"name": "Getting Specified Note",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response status code should have 200 value', () => {\r",
									"  pm.response.to.have.status(200);\r",
									"}); \r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"   pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
									"});\r",
									"\r",
									"pm.test('response body should be an object', () => {\r",
									"   const responseJson = pm.response.json();\r",
									"   pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body should have the correct property and value', () => {\r",
									"   const responseJson = pm.response.json();\r",
									" \r",
									"   pm.expect(responseJson).to.have.ownProperty('status');\r",
									"   pm.expect(responseJson.status).to.equals('success');\r",
									"   pm.expect(responseJson).to.have.ownProperty('data');\r",
									"   pm.expect(responseJson.data).to.be.an('object');\r",
									"}); \r",
									"\r",
									"pm.test('response body data should contain note object', () => {\r",
									"   const responseJson = pm.response.json();\r",
									"   const { data } = responseJson;\r",
									" \r",
									"   pm.expect(data).to.have.ownProperty('note');\r",
									"   pm.expect(data.note).to.be.an('object');\r",
									"}); \r",
									"\r",
									"pm.test('note object should contain correct value for id, title, body, and tags property', () => {\r",
									"   const responseJson = pm.response.json();\r",
									"   const { data: { note } } = responseJson;\r",
									"\r",
									"   const expectedId = pm.environment.get('noteId');\r",
									"   const expectedTitle = 'Catatan A';\r",
									"   const expectedTags = ['Android', 'Web'];\r",
									"   const expectedBody = 'Isi dari catatan A';\r",
									"\r",
									"   pm.expect(note).to.have.ownProperty('id');\r",
									"   pm.expect(note.id).to.equals(expectedId);\r",
									"   pm.expect(note).to.have.ownProperty('title');\r",
									"   pm.expect(note.title).to.equals(expectedTitle);\r",
									"   pm.expect(note).to.have.ownProperty('tags');\r",
									"   pm.expect(note.tags).to.eql(expectedTags);\r",
									"   pm.expect(note).to.have.ownProperty('body');\r",
									"   pm.expect(note.body).to.equals(expectedBody);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{accessToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "localhost:5000/notes/{{noteId}}"
					},
					"response": []
				},
				{
					"name": "Update Note",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response status code should have 200 value', () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"   pm.expect(pm.response.headers.get('Content-Type')).to.equals(\"application/json; charset=utf-8\");\r",
									"})\r",
									"\r",
									"pm.test('response body should be an object', () => {\r",
									"   const responseJson = pm.response.json();\r",
									"   pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body should have correct property and value', () => {\r",
									"   const responseJson = pm.response.json();\r",
									" \r",
									"   pm.expect(responseJson).to.have.ownProperty('status');\r",
									"   pm.expect(responseJson.status).to.equals('success');\r",
									"   pm.expect(responseJson).to.have.ownProperty('message');\r",
									"   pm.expect(responseJson.message).to.equals('Catatan berhasil diperbarui');\r",
									"});\r",
									"\r",
									"pm.test('when request the updated note', () => {\r",
									"    const noteId = pm.environment.get('noteId');\r",
									"    const getRequest = {\r",
									"        url: `http://localhost:5000/notes/${noteId}`,\r",
									"        method: 'GET',\r",
									"        header: {\r",
									"            'Authorization':`Bearer ${pm.environment.get('accessToken')}`\r",
									"        }\r",
									"    }\r",
									"    pm.sendRequest(getRequest, (error, response) => {\r",
									"        if(!error) {\r",
									"            pm.test('then the updated note should contain the latest data', () => {\r",
									"                const responseJson = response.json();\r",
									"                const { data: { note } } = responseJson;\r",
									" \r",
									"                const expectedTitle = 'Catatan A Revised';\r",
									"                const expectedTags = ['Android', 'Web'];\r",
									"                const expectedBody = 'Isi dari Catatan A Revised';\r",
									" \r",
									"                pm.expect(note.title).to.equals(expectedTitle);\r",
									"                pm.expect(note.tags).to.eql(expectedTags);\r",
									"                pm.expect(note.body).to.equals(expectedBody);\r",
									"            });\r",
									"        }\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{accessToken}}"
							}
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"Catatan A Revised\",\r\n    \"tags\": [\"Android\", \"Web\"],\r\n    \"body\": \"Isi dari Catatan A Revised\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "localhost:5000/notes/{{noteId}}"
					},
					"response": []
				},
				{
					"name": "Update Note With Bad Note Payload",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response status code should have 400 value', () => {",
									"    pm.response.to.have.status(400)",
									"})",
									"",
									"pm.test('response Content-Type header should have application/json value', () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8')",
									"})",
									"",
									"pm.test('response body should an object', () => {",
									"    const responseJson = pm.response.json()",
									"",
									"    pm.expect(responseJson).to.be.an('object')",
									"})",
									"",
									"pm.test('response body should have correct property and value', () => {",
									"    const responseJson = pm.response.json()",
									"",
									"    pm.expect(responseJson).to.ownProperty('status')",
									"    pm.expect(responseJson.status).to.equals('fail')",
									"    pm.expect(responseJson).to.ownProperty('message')",
									"    pm.expect(responseJson.message).to.not.equals('')",
									"    pm.expect(responseJson.message).to.not.equals(null)",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{accessToken}}"
							}
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{currentBadNotePayloads}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "http://localhost:5000/notes/{{noteId}}"
					},
					"response": []
				},
				{
					"name": "Delete Notes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response status code should have 200 value', () => {\r",
									"   pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"   pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8')\r",
									"}); \r",
									"\r",
									"pm.test('response body should be an object', () => {\r",
									"   const responseJson = pm.response.json();\r",
									"   pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body should have correct property and value', () => {\r",
									"   const responseJson = pm.response.json();\r",
									" \r",
									"   pm.expect(responseJson).to.have.ownProperty('status');\r",
									"   pm.expect(responseJson.status).to.equals('success');\r",
									"   pm.expect(responseJson).to.have.ownProperty('message');\r",
									"   pm.expect(responseJson.message).to.equals('Catatan berhasil dihapus');\r",
									"}); \r",
									"\r",
									"pm.test('when request the updated note', () => {\r",
									"    const noteId = pm.environment.get('noteId');\r",
									"    const getRequest = {\r",
									"        url: `http://localhost:5000/notes/${noteId}`,\r",
									"        method: 'GET',\r",
									"        header: {\r",
									"            'Authorization':`Bearer ${pm.environment.get('accessToken')}`\r",
									"        }\r",
									"    }\r",
									"    pm.sendRequest(getRequest, (error, response) => {\r",
									"        if(!error) {\r",
									"            pm.test('the deleted note should be not found', () => {\r",
									"                pm.expect(response.code).to.equals(404);\r",
									"                const responseJson = response.json();\r",
									"                pm.expect(responseJson.status).to.equals('fail');\r",
									"                pm.expect(responseJson.message).to.equals('Catatan tidak ditemukan');\r",
									"            });\r",
									"        }\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{accessToken}}"
							}
						},
						"method": "DELETE",
						"header": [],
						"url": "localhost:5000/notes/{{noteId}}"
					},
					"response": []
				},
				{
					"name": "Getting All Notes Without Access Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response status code should have 401 value', () => {",
									"    pm.response.to.have.status(401)",
									"})",
									"",
									"pm.test('response Content-Type header should have application/json value', () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8')",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "http://localhost:5000/notes"
					},
					"response": []
				}
			]
		}
	]
}